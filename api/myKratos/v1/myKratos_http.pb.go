// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.2.1

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type MyKratosHTTPServer interface {
	ArkRecruitRecommendTool(context.Context, *ArkRecruitRecommendRequest) (*ArkRecruitRecommendReply, error)
	GetArkOperatorInfo(context.Context, *GetArkOperatorInfoRequest) (*GetArkOperatorInfoReply, error)
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
}

func RegisterMyKratosHTTPServer(s *http.Server, srv MyKratosHTTPServer) {
	r := s.Route("/")
	r.GET("/helloworld/{name}", _MyKratos_SayHello0_HTTP_Handler(srv))
	r.POST("/api/ark/tools/recruit/recommend", _MyKratos_ArkRecruitRecommendTool0_HTTP_Handler(srv))
	r.GET("/api/ark/tools/operator/{name}", _MyKratos_GetArkOperatorInfo0_HTTP_Handler(srv))
}

func _MyKratos_SayHello0_HTTP_Handler(srv MyKratosHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HelloRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/myKratos.v1.myKratos/SayHello")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SayHello(ctx, req.(*HelloRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HelloReply)
		return ctx.Result(200, reply)
	}
}

func _MyKratos_ArkRecruitRecommendTool0_HTTP_Handler(srv MyKratosHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ArkRecruitRecommendRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/myKratos.v1.myKratos/ArkRecruitRecommendTool")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ArkRecruitRecommendTool(ctx, req.(*ArkRecruitRecommendRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ArkRecruitRecommendReply)
		return ctx.Result(200, reply)
	}
}

func _MyKratos_GetArkOperatorInfo0_HTTP_Handler(srv MyKratosHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetArkOperatorInfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/myKratos.v1.myKratos/GetArkOperatorInfo")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetArkOperatorInfo(ctx, req.(*GetArkOperatorInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetArkOperatorInfoReply)
		return ctx.Result(200, reply)
	}
}

type MyKratosHTTPClient interface {
	ArkRecruitRecommendTool(ctx context.Context, req *ArkRecruitRecommendRequest, opts ...http.CallOption) (rsp *ArkRecruitRecommendReply, err error)
	GetArkOperatorInfo(ctx context.Context, req *GetArkOperatorInfoRequest, opts ...http.CallOption) (rsp *GetArkOperatorInfoReply, err error)
	SayHello(ctx context.Context, req *HelloRequest, opts ...http.CallOption) (rsp *HelloReply, err error)
}

type MyKratosHTTPClientImpl struct {
	cc *http.Client
}

func NewMyKratosHTTPClient(client *http.Client) MyKratosHTTPClient {
	return &MyKratosHTTPClientImpl{client}
}

func (c *MyKratosHTTPClientImpl) ArkRecruitRecommendTool(ctx context.Context, in *ArkRecruitRecommendRequest, opts ...http.CallOption) (*ArkRecruitRecommendReply, error) {
	var out ArkRecruitRecommendReply
	pattern := "/api/ark/tools/recruit/recommend"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/myKratos.v1.myKratos/ArkRecruitRecommendTool"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MyKratosHTTPClientImpl) GetArkOperatorInfo(ctx context.Context, in *GetArkOperatorInfoRequest, opts ...http.CallOption) (*GetArkOperatorInfoReply, error) {
	var out GetArkOperatorInfoReply
	pattern := "/api/ark/tools/operator/{name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/myKratos.v1.myKratos/GetArkOperatorInfo"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MyKratosHTTPClientImpl) SayHello(ctx context.Context, in *HelloRequest, opts ...http.CallOption) (*HelloReply, error) {
	var out HelloReply
	pattern := "/helloworld/{name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/myKratos.v1.myKratos/SayHello"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
