// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: myKratos/v1/myKratos.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MyKratosClient is the client API for MyKratos service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MyKratosClient interface {
	// 模板自带SayHello api用于测试
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	// 实现明日方舟公开招募图片识别并返回推荐tag选择
	ArkRecruitRecommendTool(ctx context.Context, in *ArkRecruitRecommendRequest, opts ...grpc.CallOption) (*ArkRecruitRecommendReply, error)
	// 实现查询明日方舟干员信息
	GetArkOperatorInfo(ctx context.Context, in *GetArkOperatorInfoRequest, opts ...grpc.CallOption) (*GetArkOperatorInfoReply, error)
}

type myKratosClient struct {
	cc grpc.ClientConnInterface
}

func NewMyKratosClient(cc grpc.ClientConnInterface) MyKratosClient {
	return &myKratosClient{cc}
}

func (c *myKratosClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/myKratos.v1.myKratos/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myKratosClient) ArkRecruitRecommendTool(ctx context.Context, in *ArkRecruitRecommendRequest, opts ...grpc.CallOption) (*ArkRecruitRecommendReply, error) {
	out := new(ArkRecruitRecommendReply)
	err := c.cc.Invoke(ctx, "/myKratos.v1.myKratos/ArkRecruitRecommendTool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myKratosClient) GetArkOperatorInfo(ctx context.Context, in *GetArkOperatorInfoRequest, opts ...grpc.CallOption) (*GetArkOperatorInfoReply, error) {
	out := new(GetArkOperatorInfoReply)
	err := c.cc.Invoke(ctx, "/myKratos.v1.myKratos/GetArkOperatorInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyKratosServer is the server API for MyKratos service.
// All implementations must embed UnimplementedMyKratosServer
// for forward compatibility
type MyKratosServer interface {
	// 模板自带SayHello api用于测试
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	// 实现明日方舟公开招募图片识别并返回推荐tag选择
	ArkRecruitRecommendTool(context.Context, *ArkRecruitRecommendRequest) (*ArkRecruitRecommendReply, error)
	// 实现查询明日方舟干员信息
	GetArkOperatorInfo(context.Context, *GetArkOperatorInfoRequest) (*GetArkOperatorInfoReply, error)
	mustEmbedUnimplementedMyKratosServer()
}

// UnimplementedMyKratosServer must be embedded to have forward compatible implementations.
type UnimplementedMyKratosServer struct {
}

func (UnimplementedMyKratosServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedMyKratosServer) ArkRecruitRecommendTool(context.Context, *ArkRecruitRecommendRequest) (*ArkRecruitRecommendReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArkRecruitRecommendTool not implemented")
}
func (UnimplementedMyKratosServer) GetArkOperatorInfo(context.Context, *GetArkOperatorInfoRequest) (*GetArkOperatorInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArkOperatorInfo not implemented")
}
func (UnimplementedMyKratosServer) mustEmbedUnimplementedMyKratosServer() {}

// UnsafeMyKratosServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MyKratosServer will
// result in compilation errors.
type UnsafeMyKratosServer interface {
	mustEmbedUnimplementedMyKratosServer()
}

func RegisterMyKratosServer(s grpc.ServiceRegistrar, srv MyKratosServer) {
	s.RegisterService(&MyKratos_ServiceDesc, srv)
}

func _MyKratos_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyKratosServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/myKratos.v1.myKratos/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyKratosServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyKratos_ArkRecruitRecommendTool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArkRecruitRecommendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyKratosServer).ArkRecruitRecommendTool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/myKratos.v1.myKratos/ArkRecruitRecommendTool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyKratosServer).ArkRecruitRecommendTool(ctx, req.(*ArkRecruitRecommendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyKratos_GetArkOperatorInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArkOperatorInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyKratosServer).GetArkOperatorInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/myKratos.v1.myKratos/GetArkOperatorInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyKratosServer).GetArkOperatorInfo(ctx, req.(*GetArkOperatorInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MyKratos_ServiceDesc is the grpc.ServiceDesc for MyKratos service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MyKratos_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "myKratos.v1.myKratos",
	HandlerType: (*MyKratosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _MyKratos_SayHello_Handler,
		},
		{
			MethodName: "ArkRecruitRecommendTool",
			Handler:    _MyKratos_ArkRecruitRecommendTool_Handler,
		},
		{
			MethodName: "GetArkOperatorInfo",
			Handler:    _MyKratos_GetArkOperatorInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "myKratos/v1/myKratos.proto",
}
